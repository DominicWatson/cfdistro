<project name="selftest" default="test.all" basedir="./" xmlns:antcontrib="antlib:net.sf.antcontrib" xmlns:au="antlib:org.apache.ant.antunit">
<!-- 
to run:  ant -f selftest.xml -lib ../ant/lib
 -->
	<property name="use.jgit" value="false" />
	<property name="temp.dir" location="./temp" />
	<property name="git.repo.dir" location="${temp.dir}/gitrepo" />
	<property name="test.project.dir" location="${temp.dir}/testproject" />
	<property name="test.src.dir" location="${test.project.dir}/src/testproject" />
	<delete dir="${temp.dir}" />
	<mkdir dir="${test.project.dir}" />
	<mkdir dir="${git.repo.dir}" />


	<property name="cfdistro.basedir" location="./../" />

    <condition property="cfdistro.lib.dir" value="${cfdistro.basedir}/lib">
            <isfileselected file="${cfdistro.basedir}"><writable/></isfileselected>
    </condition>
    <property name="cfdistro.lib.dir" value="${user.home}/cfdistro/lib"/>

	<path id="build.lib.path">
		<fileset dir="${cfdistro.lib.dir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${cfdistro.basedir}/ant/lib">
			<include name="*.jar" />
		</fileset>
	</path>
	<macrodef name="cfdistro">
		<attribute name="target" />
		<attribute name="properties" default=""/>
		<sequential>
			<antcontrib:var name="cfdistro.mdef.out" unset="true" />
			<antcontrib:var name="cfdistro.mdef.err" unset="true" />
			<antcontrib:var name="cfdistro.mdef.result" unset="true" />
			<echo message="CFDISTRO: @{target}" />
			<exec  os="Linux,Mac OS X" executable="sh" dir="${test.project.dir}" failonerror="false" 
				outputproperty="cfdistro.mdef.out" errorproperty="cfdistro.mdef.err" resultproperty="cfdistro.mdef.result">
				<arg line="${cfdistro.basedir}/bin/cfdistro @{target} @{properties}" />
			</exec>
			<exec  os="Windows,Windows 7" executable="cmd" dir="${test.project.dir}"  failonerror="false" 
				outputproperty="cfdistro.mdef.out" errorproperty="cfdistro.mdef.err" resultproperty="cfdistro.mdef.result">
				<arg line="/c ${cfdistro.basedir}\bin\cfdistro.bat @{target} @{properties}" />
			</exec>
			<echo message="${cfdistro.mdef.out}" />
			<fail message="${cfdistro.mdef.err}">
				<condition><not><equals arg1="0" arg2="${cfdistro.mdef.result}"/></not></condition>
			</fail>
		</sequential>
	</macrodef>

	<import file="${cfdistro.basedir}/scm-git.xml"/>

	<echo>*******************  BEGIN TESTS  **********************</echo>

	<macrodef name="test.setup">
		<sequential>
		<echo message="*******************  SETUP  **********************"/>
		<git command="init" dir="${git.repo.dir}" />
		<echo message="newcommit" file="${git.repo.dir}/.gitignore" />
		<git command="add" dir="${git.repo.dir}">
			<args><arg value=".gitignore" /></args>
		</git>
		<git command="commit" dir="${git.repo.dir}">
			<args><arg value="-a" /><arg value="-m" /><arg value="initialized repo" /></args>
		</git>
		<cfdistro target="cfdistro.skeleton"
			properties="target.dir='${test.project.dir}' distro.name='testproject'" />
		<echo message="*******************  /SETUP  **********************"/>
		</sequential>
	</macrodef>
	<test.setup />

	<target name="test.all">
		<antcontrib:runtarget target="test.project.update" />
		<!-- 
		<test.teardown />
		 -->
	</target>

	<target name="test.project.update">
		<antcontrib:var name="props" value="src.dir=${test.src.dir}" />
		<antcontrib:var value="${props} src.dir=${test.src.dir}" name="props" />
		<antcontrib:var value="${props} sc=myrepo" name="props" />
		<antcontrib:var value="${props} sc.myrepo.type=git" name="props" />
		<antcontrib:var value="${props} sc.myrepo.dest=@src.dir@" name="props" />
		<antcontrib:var value="${props} sc.myrepo.uri=${git.repo.dir}/.git" name="props" />
		<antcontrib:var value="${props} sc.myrepo.branch='master'" name="props" />
		<antcontrib:var value="${props} sc.myrepo.user=''" name="props" />
		<antcontrib:var value="${props} sc.myrepo.password=''" name="props" />
		
		<!-- this will do a checkout as the project sources are not there yet -->
		<cfdistro target="project.update" properties="${props}" />

		<echo message="newcommit" file="${git.repo.dir}/fun.txt" />
		<checksum file="${git.repo.dir}/fun.txt" property="funMD5"/>
		<git command="add" dir="${git.repo.dir}">
			<args><arg value="fun.txt" /></args>
		</git>
		<git command="commit" dir="${git.repo.dir}">
			<args><arg value="-a" /><arg value="-m" /><arg value="testing conflict bro" /></args>
		</git>
		<echo message="CONFLICT YO!" file="${test.src.dir}/fun.txt" />
		<echo message="############# TESTING CONFLICT  ###################"/>

		<cfdistro target="project.update" properties="${props}" />

	    <au:assertFileExists file="${test.src.dir}/fun.txt" 
	    	message="test.check.newrevision failure!  Does not exist: ${test.src.dir}/fun.txt"/>

		<checksum file="${git.repo.dir}/fun.txt" property="${funMD5}" verifyProperty="isEqual"/>
		<fail message="test.check.newrevision failure!  Did not update. ${test.src.dir}/fun.txt" unless="isEqual" />

		<echo message="############# TESTING CLEAN  ###################"/>
		<echo message="newfile" file="${test.src.dir}/fun2.txt" />
		<cfdistro target="project.update" properties="${props} project.overwrite=true" />

	    <au:assertResourceDoesntExist resource="${test.src.dir}/fun2.txt" 
	    	message="project.update project.overwrite=true failure!  Did not make pristine. ${test.src.dir}/fun2.txt still exists" />

		<!-- 
		****** test incoming change with no local modifications (git pull) ****** 
		-->
		<echo message="############# TESTING INCOMING  ###################"/>
		<echo message="newfile3" file="${git.repo.dir}/fun3.txt" />
		<git command="add" dir="${git.repo.dir}">
			<args><arg value="fun3.txt" /></args>
		</git>
		<git command="commit" dir="${git.repo.dir}">
			<args><arg value="-a" /><arg value="-m" /><arg value="testing only remote change" /></args>
		</git>
		<cfdistro target="project.update" properties="${props}" />
	    <au:assertFileExists file="${test.src.dir}/fun3.txt" 
	    	message="project.update with no local modifications failure!" />
		
		<cfdistro target="project.update" properties="${props}" />
		
		<delete dir="${temp.dir}" />
	</target>


	<macrodef name="test.teardown">
		<sequential>
		<echo message="*******************  TEARDOWN  **********************"/>
 		<delete dir="${temp.dir}" />
<!-- 
 -->
		</sequential>
	</macrodef>

</project>
